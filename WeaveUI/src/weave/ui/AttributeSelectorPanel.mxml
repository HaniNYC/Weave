<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->

<ControlPanel
	xmlns="weave.ui.*"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	title="Attribute Selector"
	verticalScrollPolicy="off" horizontalScrollPolicy="off"
	backgroundColor="#EFF4BC" xmlns:editors="weave.editors.*"
	>
	<mx:VBox width="100%" height="100%" id="outerVBox" verticalGap="5">
		<mx:HBox id="paramSelector" verticalAlign="middle">
			<mx:Label text="Parameter to modify:"/>
			<CustomToggleButtonBar
				id="dimensionTypeLinks"
				width="100%"
				useHandCursor="true"
				dataProvider="{selectableAttributeNames}"
				itemClick="linkToObject(selectableAttributes[event.index]);"/>
		</mx:HBox>
		<mx:VDividedBox width="100%" height="100%" id="verticalDividedBox">
			<editors:DynamicColumnEditor id="editor" width="100%" height="100%"/>
			<mx:HBox id="addColumnControls" width="100%">
				<mx:Spacer width="100%"/>
				<mx:Button id="addAllButton" label="Add all" click="addAll()" toolTip="Add all attributes from the selected category"/>
				<mx:Button label="Add selected" click="addSelected()"/>
			</mx:HBox>
			<ColumnListComponent id="columnList" width="100%" height="100%"/>
		</mx:VDividedBox>
	</mx:VBox>
	<mx:Script>
		<![CDATA[
			import mx.collections.ListCollectionView;
			import mx.controls.Label;
			import mx.managers.PopUpManager;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.core.ILinkableHashMap;
			import weave.api.core.ILinkableObject;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IColumnWrapper;
			import weave.api.getCallbackCollection;
			import weave.api.getLinkableOwner;
			import weave.api.registerLinkableChild;
			import weave.api.ui.IVisToolWithSelectableAttributes;
			import weave.compiler.StandardLib;
			import weave.core.LinkableWatcher;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.ReferencedColumn;
			import weave.data.ColumnReferences.HierarchyColumnReference;
			import weave.utils.ColumnUtils;
			import weave.utils.HierarchyUtils;
			
			override protected function constructor():void
			{
				super.constructor();
				
				panelWidth.value = "50%";
				panelHeight.value = "60%";
				panelX.value = "25%";
				panelY.value = "15%";
				minimizable.value = true;
				maximizable.value = true;
				
				closeable.value = true;
				closeable.lock();
			}
			
			override protected function createChildren():void
			{
				if (createdChildren)
					return;
				super.createChildren();

				registerLinkableChild(this, editor);
				registerLinkableChild(this, columnList);
				columnList.titleHBox.addChild(addColumnControls);
				
				Weave.properties.showAddAllButton.addImmediateCallback(this, function():void {
					addAllButton.visible = Weave.properties.showAddAllButton.value;
				}, true);
			}
			
			override public function dispose():void
			{
				super.dispose();
			}
			
			private function addAll():void
			{
				getCallbackCollection(columnList.hashMap).delayCallbacks();
				var root:XML = editor.hierarchySelector.attributeHierarchy.value;
				if( editor.hierarchySelector.attributesView.dataProvider != null )
				{
					var attrs:Array = (editor.hierarchySelector.attributesView.dataProvider as ListCollectionView).toArray();
					for (var i:int = 0; i < attrs.length; i++)
					{
						var attr:XML = attrs[i];
						var col:ReferencedColumn = columnList.hashMap.requestObject(null, ReferencedColumn, false);
						var ref:HierarchyColumnReference = col.dynamicColumnReference.requestLocalObject(HierarchyColumnReference, false);
						editor.copyPathToRef(HierarchyUtils.getPathFromNode(root, attr), ref);
					}
				}
				getCallbackCollection(columnList.hashMap).resumeCallbacks();
			}
			
			private function addSelected():void
			{
				var newColumn:ILinkableObject = columnList.hashMap.requestObjectCopy(null, editor.dynamicColumn.internalObject);
				columnList.beginEditVariableName(newColumn);
			}
			
			private var selectableAttributes:Array = [];
			[Bindable] private var selectableAttributeNames:Array = [];
			
			private const toolWatcher:LinkableWatcher = registerLinkableChild(this, new LinkableWatcher(IVisToolWithSelectableAttributes), handleTool, true);
			
			private function handleTool():void
			{
				if (!parent)
					toolWatcher.target = null;
				
				var tool:IVisToolWithSelectableAttributes = toolWatcher.target as IVisToolWithSelectableAttributes;
				if (tool)
				{
					var selectedIndex:int = dimensionTypeLinks.selectedIndex;
					var attrs:Array = tool.getSelectableAttributes();
					var names:Array = tool.getSelectableAttributeNames();
					
					// do nothing if nothing changed
					if (!StandardLib.arrayCompare(attrs, selectableAttributes)
						&& !StandardLib.arrayCompare(names, selectableAttributeNames))
						return;
						
					selectableAttributes = attrs;
					selectableAttributeNames = names;
					title = ControlPanel.getControlPanelTitle(tool, TITLE_FORMAT);
					if (selectedIndex >= 0)
						linkToObject(selectableAttributes[selectedIndex]);
				}
				else
				{
					selectableAttributes = [];
					selectableAttributeNames = [];
				}
				showOrHideParamSelector(tool != null);
				
				if (!columnList.hashMap && verticalDividedBox == columnList.parent)
					verticalDividedBox.removeChild(columnList);
			}
			
			private function showOrHideParamSelector(show:Boolean):void
			{
				if (show && !paramSelector.parent)
					outerVBox.addChildAt(paramSelector,0);
				if (!show && paramSelector.parent)
					outerVBox.removeChild(paramSelector);
			}
			
			private static const DEFAULT_TITLE:String = "Attribute selector";
			private static const TITLE_FORMAT:String = DEFAULT_TITLE + " for {0}";
			
			public function linkToObject(columnOrHashMap:ILinkableObject, objectTitle:String = null):void
			{
				editor.setTarget(ColumnUtils.hack_findInternalDynamicColumn(columnOrHashMap as IColumnWrapper));

				var tool:IVisToolWithSelectableAttributes = getVisTool(columnOrHashMap);
				toolWatcher.target = tool;
				handleTool();
				if (tool)
				{
					targets = tool.getSelectableAttributes();
					
					dimensionTypeLinks.selectedIndex = tool.getSelectableAttributes().indexOf(columnOrHashMap);
				}
				else
				{
					targets = columnOrHashMap ? [columnOrHashMap] : [];
					
					if (objectTitle)
						title = lang(TITLE_FORMAT, objectTitle);
					else
						title = lang(DEFAULT_TITLE);
				}
				
				if (columnOrHashMap is ILinkableHashMap)
				{

					// set path to first column.
					var columns:Array = (columnOrHashMap as ILinkableHashMap).getObjects(DynamicColumn);
					if (columns.length > 0)
					{
						var columnToCopy:IAttributeColumn = columns[0] is DynamicColumn
							? (columns[0] as DynamicColumn).getInternalColumn()
							: columns[0];
						editor.dynamicColumn.requestLocalObjectCopy(columnToCopy);
					}
					else
					{
						columns = (columnOrHashMap as ILinkableHashMap).getObjects(IAttributeColumn);
						if (columns.length > 0)
							editor.dynamicColumn.requestLocalObjectCopy(columns[0]);
					}
					
					var child:DisplayObject = columnList.selectorControls;
					if (child.parent)
						child.parent.removeChild(child);
					columnList.hashMap = columnOrHashMap as ILinkableHashMap;
					columnList.label = objectTitle ? objectTitle : lang('Selected attributes');
					verticalDividedBox.addChild(columnList);
				}
				else if (verticalDividedBox == columnList.parent)
				{
					verticalDividedBox.removeChild(columnList);
				}
				
				_instance.editor.clearSearch();
			}
			
			///////////////////////////////////////////////////////////////////////
			
			public static function get instance():AttributeSelectorPanel
			{
				if (!_instance)
					_instance = new AttributeSelectorPanel();
				return _instance;
			}
			public static var _instance:AttributeSelectorPanel;
			public static function open(columnOrHashMap:ILinkableObject = null, title:String = null, showVariableNames:Boolean = false):void
			{
				if (!instance.parent)
					PopUpManager.addPopUp(_instance, WeaveAPI.topLevelApplication as DisplayObject);
				
				_instance.linkToObject(columnOrHashMap, title);
				_instance.columnList.showVariableNames = showVariableNames;
				
				if (!_instance.parent)
					PopUpManager.addPopUp(_instance, WeaveAPI.topLevelApplication as DisplayObject);
				_instance.restorePanel();
			}
			public static function getVisTool(selectableAttribute:ILinkableObject, evenIfNotInSelectableAttributes:Boolean = false):IVisToolWithSelectableAttributes
			{
				var owner:ILinkableObject = getLinkableOwner(selectableAttribute);
				while (owner && !(owner is IVisToolWithSelectableAttributes))
					owner = getLinkableOwner(owner);
				
				var tool:IVisToolWithSelectableAttributes = owner as IVisToolWithSelectableAttributes;

				if (evenIfNotInSelectableAttributes)
					return tool;
				
				if (tool && tool.getSelectableAttributes().indexOf(selectableAttribute) >= 0)
					return tool;
				
				return null;
			}
		]]>
	</mx:Script>
</ControlPanel>
