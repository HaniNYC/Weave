<?xml version="1.0" encoding="utf-8"?>
<mx:TabNavigator xmlns="weave.visualization.tools.*"
				 xmlns:ui="weave.ui.*"
				 implements="weave.api.ui.ILinkableObjectEditor" xmlns:managers="weave.editors.managers.*"
				 xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%">
	<mx:Script>
		<![CDATA[
			import mx.events.SliderEvent;
			
			import weave.Weave;
			import weave.api.core.ILinkableObject;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.compiler.StandardLib;
			
			[Bindable] public var _target:ScatterPlotTool;
			
			public function setTarget(object:ILinkableObject):void
			{
				_target = object as ScatterPlotTool;
			}
			public function applyChanges():void
			{
				
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				linkBindableProperty(_target.plotter.alphaColumn.defaultValue, alphaSlider, "value");
				linkBindableProperty(_target.plotter.enabledSizeBy, sizeByCheck, "selected");
				_target.plotter.minScreenRadius.addGroupedCallback(this, updateSizeSlider);
				_target.plotter.maxScreenRadius.addGroupedCallback(this, updateSizeSlider, true);
				_target.showColorPicker.addGroupedCallback(this,updateColorOverride);
				_target.visualization.marginLeftNumber.addGroupedCallback(this, updateRegressionEquation);
				_target.visualization.marginBottomNumber.addGroupedCallback(this, updateRegressionEquation);
				getCallbackCollection(_target.regressionPlotter).addGroupedCallback(this, updateRegressionEquation, true);
			}
			
			private function updateRegressionEquation():void
			{
				if( _target.regressionPlotter != null )
					if ( _target.regressionPlotter.drawLine.value )
					{
						var slope:Number = StandardLib.roundSignificant(_target.regressionPlotter.getSlope(), 4);
						var intercept:Number = StandardLib.roundSignificant(_target.regressionPlotter.getIntercept(), 4);
						lineEquation.text = "Equation: y = " + slope + "x"+ " + " + intercept;
					}
					else
						lineEquation.text = "Equation: y = mx + b";
				else
					lineEquation.text = "Equation: y = mx + b";
			}
			
			private function updateColorOverride():void
			{
				scatterplotColorOverride.enabled = _target.showColorPicker.value;
			}
			
			private function handleSizeSliderChange(event:SliderEvent):void
			{
				if(event.thumbIndex == 0)
				{
					_target.plotter.minScreenRadius.value = event.value;
				}
				else
				{
					_target.plotter.maxScreenRadius.value = event.value;
				}
			}
			
			private function alphaSliderFormatFunction(item:Number):String {
				//return int(100 - (item * 100)) + "% Transparent";
				return int((item * 100)) + "% Opaque" + "\n" + int(100 - (item * 100)) + "% Transparent";
			}
			
			protected function createLegend():void
			{
				var sizeBinLegendTool:SizeBinLegendTool = Weave.root.requestObject(null, SizeBinLegendTool, false);
				sizeBinLegendTool.dynamicScatterPlotTool.globalName = Weave.root.getName(_target);
			}
			
			private function updateSizeSlider():void
			{
				sizeBySlider.values = [_target.plotter.minScreenRadius.value, _target.plotter.maxScreenRadius.value];
			}
			
			
		]]>
	</mx:Script>	
	<mx:VBox id="VizControlsPanel" label="Visualization Controls">
		<ui:DynamicColumnComponent visTool="{_target}" label="x column" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = _target.plotter.xColumn"/>
		<ui:DynamicColumnComponent visTool="{_target}" label="y column" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = _target.plotter.yColumn"/>
		<ui:DynamicColumnComponent visTool="{_target}" label="color" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = _target.colorColumn" showLinkControl="false"/>
		<ui:DynamicColumnComponent visTool="{_target}" label="size" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = _target.plotter.radiusColumn"/>
		<mx:HBox width="100%" verticalAlign="middle">
			<mx:CheckBox id="sizeByCheck" label="Size by: {sizeByCheck.selected ? 'ENABLED' : 'DISABLED'}"/>
			
			<mx:Label text="Point Size:"/>
			<mx:HSlider id="sizeBySlider"
						enabled="{sizeByCheck.selected}"
						liveDragging="true"
						width="100%"
						thumbCount="2" 
						snapInterval="1"
						minimum="1" 
						maximum="60"
						tickInterval="5"
						change="handleSizeSliderChange(event)"
						mouseDown="event.stopImmediatePropagation();"/>
		</mx:HBox>
		<mx:HBox width="100%" verticalAlign="middle">
			<mx:Label text="Point Opacity:" 
					  toolTip="Use this control to see how transparent points are.  Moving left increases transparency (decreased opacity), moving to the right decreases transparency (increased opacity) up to fully opaque (no transparency)."/>
			
			<mx:HSlider id="alphaSlider" 
						width="100%" 
						alpha="1.0"
						dataTipFormatFunction="alphaSliderFormatFunction"
						minimum="0.1" maximum="1.0" value="1.0"
						liveDragging="true"/>
		</mx:HBox>
		<mx:CheckBox id="probeColumnsCheckBox" label="Include tool attributes in probe tooltip"
					 toolTip="Checking this box makes the x, y, color and size attributes visible in this tool's probe tooltip"
					 creationComplete="linkBindableProperty(_target.includeToolAttributesInProbe,event.target,'selected')"/>
		<mx:Button label="Show legend" click="createLegend()"/>
	</mx:VBox>
	<mx:VBox id="AdvancedPanel" label="Advanced">
		<mx:VBox>
			<mx:CheckBox id="regressionLineCheckBox" label="Enable regression line"
						 toolTip="Check this box to draw a regression line on the scatterplot"
						 creationComplete="linkBindableProperty(_target.regressionPlotter.drawLine,event.target,'selected')"/>
			<ui:Indent>
				<mx:VBox>
					<mx:Label id="lineEquation" text="Equation: y = mx + b"/>
					<mx:HBox>
						<mx:Label text="Line Color" />
						<mx:ColorPicker id="regressionColorPicker" 
										creationComplete="linkBindableProperty(_target.regressionPlotter.lineStyle.color.defaultValue, event.target, 'selectedColor')"
										enabled="{regressionLineCheckBox.selected}"/>
					</mx:HBox>
					<mx:HBox>
						<mx:Label text="Line Thickness" />
						<mx:HSlider id="regressionThicknessSlider"
									creationComplete="linkBindableProperty(_target.regressionPlotter.lineStyle.weight.defaultValue, event.target, 'value')"
									enabled="{regressionLineCheckBox.selected}"
									minimum="1" maximum="10" snapInterval="1" liveDragging="true"
									tickInterval="1"/>
					</mx:HBox>
					<mx:HBox>
						<mx:Label text="Line Opacity" />
						<mx:HSlider id="regressionAlphaSlider"
									enabled="{regressionLineCheckBox.selected}"
									minimum="0.1" maximum="1" snapInterval=".1" liveDragging="true"
									tickInterval="0.1"
									creationComplete="linkBindableProperty(_target.regressionPlotter.lineStyle.alpha.defaultValue, event.target, 'value')"/>
					</mx:HBox>
				</mx:VBox>
			</ui:Indent>
		</mx:VBox>
		<mx:HBox>
			<mx:CheckBox id="colorOverrideCheckbox" label="Override Global Color" creationComplete="linkBindableProperty(_target.showColorPicker,event.target,'selected')"/>
			<mx:ColorPicker id="scatterplotColorOverride" creationComplete="linkBindableProperty(_target.overrideColor,event.target,'selectedColor')"/>
		</mx:HBox>
	</mx:VBox>
</mx:TabNavigator>
